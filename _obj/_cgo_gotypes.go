// Code generated by cmd/cgo; DO NOT EDIT.

package megasdkgo

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype__GoString_ string

type _Ctype___int64_t = _Ctype_long

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_int64_t = _Ctype___int64_t

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_struct_AddDownloadResp struct {
	gid		*_Ctype_char
	errorString	*_Ctype_char
	errorCode	_Ctype_int
	_		[4]byte
}

type _Ctype_struct_DownloadInfo struct {
	name		*_Ctype_char
	completedLength	_Ctype_int64_t
	totalLength	_Ctype_int64_t
	speed		_Ctype_int64_t
	state		_Ctype_int
	gid		*_Ctype_char
	errorCode	_Ctype_int
	errorString	*_Ctype_char
}

type _Ctype_struct_LoginResp struct {
	errorCode	_Ctype_int
	errorString	*_Ctype_char
}

//go:notinheap
type _Ctype_void_notinheap struct{}

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})


func _Cfunc_CString(s string) *_Ctype_char {
	p := _cgo_cmalloc(uint64(len(s)+1))
	pp := (*[1<<30]byte)(p)
	copy(pp[:], s)
	pp[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc_addDownload
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc_addDownload _cgo_2c8c3dd1bcd3_Cfunc_addDownload
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc_addDownload byte
var _cgo_2c8c3dd1bcd3_Cfunc_addDownload = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc_addDownload)

//go:cgo_unsafe_args
func _Cfunc_addDownload(p0 *_Ctype_char, p1 *_Ctype_char) (r1 *_Ctype_struct_AddDownloadResp) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc_addDownload, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc_cancelDownload
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc_cancelDownload _cgo_2c8c3dd1bcd3_Cfunc_cancelDownload
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc_cancelDownload byte
var _cgo_2c8c3dd1bcd3_Cfunc_cancelDownload = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc_cancelDownload)

//go:cgo_unsafe_args
func _Cfunc_cancelDownload(p0 *_Ctype_char) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc_cancelDownload, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc_free
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc_free _cgo_2c8c3dd1bcd3_Cfunc_free
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc_free byte
var _cgo_2c8c3dd1bcd3_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid _cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid byte
var _cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid)

//go:cgo_unsafe_args
func _Cfunc_getDownloadByGid(p0 *_Ctype_char) (r1 *_Ctype_struct_DownloadInfo) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc_getDownloadByGid, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc_initMega
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc_initMega _cgo_2c8c3dd1bcd3_Cfunc_initMega
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc_initMega byte
var _cgo_2c8c3dd1bcd3_Cfunc_initMega = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc_initMega)

//go:cgo_unsafe_args
func _Cfunc_initMega(p0 *_Ctype_char) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc_initMega, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc_login
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc_login _cgo_2c8c3dd1bcd3_Cfunc_login
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc_login byte
var _cgo_2c8c3dd1bcd3_Cfunc_login = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc_login)

//go:cgo_unsafe_args
func _Cfunc_login(p0 *_Ctype_char, p1 *_Ctype_char) (r1 *_Ctype_struct_LoginResp) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc_login, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}

//go:cgo_import_static _cgo_2c8c3dd1bcd3_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_2c8c3dd1bcd3_Cfunc__Cmalloc _cgo_2c8c3dd1bcd3_Cfunc__Cmalloc
var __cgofn__cgo_2c8c3dd1bcd3_Cfunc__Cmalloc byte
var _cgo_2c8c3dd1bcd3_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_2c8c3dd1bcd3_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_2c8c3dd1bcd3_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
